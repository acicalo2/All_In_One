params {
    samplesheet         = 'samplesheet.csv'
    run_qc              = false
    run_assembly        = false
    project_id          = "TEST"
    // Optional output directory
    outdir              = 'results/'
    scripts             = "${baseDir}/scripts/"
    // You can define params.longreads, hybrid, etc. as needed
    longreads           = false
    hybrid              = false
    shortreads          = false
    //read_mode           = "short"
    // Remove Host From Reads
    map2reads           = false
    // BlastX
    run_blastx          = true
    // rRNA database
    remove_rRNA_reads=false
    host_db_silva=""
    bbmap_args="k=13 usemodulo=f rebuild=f interleaved=auto fastareadlen=500 unpigz=f touppercase=t "
    bbmap_ref_silva    = "/database/bbmap/silva_release132_oral_flora_rRNA/"
    // host database
    host_db             = "" 
    // assembly parameters
    subassembly         = false
    metaspades          = false
    metaSPAdes          = "spades.py --only-assembler --tmp-dir /dev/shm --meta" // assembler parameters
    unicycler           = false
    unicycler_mode	= "normal"
    spades              = false // currently implemented for exempliphi
    dragonflye          = false
    dragonflye_isolate  = false
    plasmidspades       = false
    // dragonflye parameters
    use_gsize           = false
    model               = ""
    gsize               = ""
    threads             = 8
    memory              = 8
    medaka              = false
    medaka_model        = ""
    // for dorado aligner & polish
    dorado_software     = "/export/dorado"
    model               = "/export/dorado/models/dna_r10.4.1_e8.2_400bps_polish_bacterial_methylation_v5.0.0"
    bam_file            = ""
    dorado_polish       = false 
    //nanopore_assembly params
    nanopore_assembly   = false
    // hecatomb params
    hecatomb_config     = ""
    // diamond option
    diamond_args        = "--block-size 20 --iterate faster --index-chunks 1 --tmpdir /tmp" // memory args for diamond blastx
    diamond_dbdir       = "/database/diamond/nr.dmnd" // diamond database directory
    // meganize options
    megandb             = "/database/megan"   // Megan Database
    meganpath           = "/export/bin/megan/tools" // path to MEGAN tools
    mmseq_tmp_dir       = "/export/tmp/" // mmseqs tmp dir
    // mmseq database 
    db_BN	 	= "/database/mmseqs/core_nt/core_nt" 
    conda_envs = {
        fastqc = "${baseDir}/envs/fastqc.yaml"
    }
}

process {

withLabel: optimized_split_interleaved {
    cpus = 4
    memory = '8 GB'
    time = '3h'
    cache = 'deep'
    clusterOptions = '--partition=normal --cpus-per-task=4 --mem=8G'
}

withLabel: lowmem {
    cpus = 4
    memory = '8 GB'
    time = '3h'
    cache = 'deep'
    clusterOptions = '--partition=normal --cpus-per-task=4 --mem=8G'
}
withLabel: optimized_Meganize_ShortReads_BlastX {
    cpus = 8
    memory = '307 GB'
    clusterOptions = '--partition=normal --cpus-per-task=8 --mem=307G'
}

withLabel: optimized_Meganize_Contigs_BlastX {
    cpus = 32
    memory = '307 GB'
    clusterOptions = '--partition=normal --cpus-per-task=32 --mem=307G'
}

withLabel: optimized_blastx_reads {
    cpus = 80
    memory = '384 GB'
    clusterOptions = '--partition=normal --cpus-per-task=80 --mem=384G'
}

withLabel: optimized_blastx_contigs {
    cpus = 72
    memory = '300 GB'
    clusterOptions = '--partition=normal --cpus-per-task=72 --mem=300G'
}

withLabel: optimized_MMSEQ_contigs_against_NT_metaspades {
    cpus = 128
    memory = '900 GB'
    clusterOptions = '--partition=normal --cpus-per-task=128 --mem=900G'
}

}

profiles {
   local {
       process.executor = 'local'
       process.memory   = '32 GB'
       process.cpus     =  6
   }

   slurm {
      process.executor  = 'slurm'
      process.queue     = 'normal'
   }
}


timeline {
	enabled = true
	file    = "${params.outdir}/pipeline.timeline.html"
        overwrite = true
}
trace {
	enabled = true
	file    = "${params.outdir}/pipeline.trace"
        overwrite = true
        append = false
}

report {
	enabled = true
	file = "${params.outdir}/pipeline.report.html"
        overwrite = true
}

dag {
	enabled = true
	file = "${params.outdir}/pipeline.dag.svg"
        overwrite = true
}

